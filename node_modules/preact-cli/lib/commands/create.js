'use strict';

exports.__esModule = true;

let initializeVersionControl = (() => {
	var _ref2 = _asyncToGenerator(function* (target) {
		let git;
		try {
			git = yield (0, _es6Promisify2.default)(_which2.default)('git');
		} catch (e) {
			process.stderr.write('Could not find git in $PATH.\n');
			process.stdout.write('Continuing without initializing version control...\n');
		}
		if (git) {
			const gitignore = trimLeft(`
		node_modules
		/build
		/*.log
		`) + '\n';
			const gitignorePath = _path2.default.resolve(target, '.gitignore');
			yield _fs2.default.writeFile(gitignorePath, gitignore);

			const cwd = target;

			yield (0, _crossSpawnPromise2.default)('git', ['init'], { cwd });
			yield (0, _crossSpawnPromise2.default)('git', ['add', '-A'], { cwd });

			const defaultGitEmail = 'developit@users.noreply.github.com';
			const defaultGitUser = 'Preact CLI';
			let gitUser;
			let gitEmail;

			try {
				gitEmail = (yield (0, _crossSpawnPromise2.default)('git', ['config', 'user.email'])).toString();
			} catch (e) {
				gitEmail = defaultGitEmail;
			}

			try {
				gitUser = (yield (0, _crossSpawnPromise2.default)('git', ['config', 'user.name'])).toString();
			} catch (e) {
				gitUser = defaultGitUser;
			}

			yield (0, _crossSpawnPromise2.default)('git', ['commit', '-m', 'initial commit from Preact CLI'], {
				cwd,
				env: {
					GIT_COMMITTER_NAME: gitUser,
					GIT_COMMITTER_EMAIL: gitEmail,
					GIT_AUTHOR_NAME: defaultGitUser,
					GIT_AUTHOR_EMAIL: defaultGitEmail
				}
			});
		}
	});

	return function initializeVersionControl(_x) {
		return _ref2.apply(this, arguments);
	};
})();

var _asyncCommand = require('../lib/async-command');

var _asyncCommand2 = _interopRequireDefault(_asyncCommand);

var _fs = require('fs.promised');

var _fs2 = _interopRequireDefault(_fs);

var _recursiveCopy = require('recursive-copy');

var _recursiveCopy2 = _interopRequireDefault(_recursiveCopy);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _es6Promisify = require('es6-promisify');

var _es6Promisify2 = _interopRequireDefault(_es6Promisify);

var _crossSpawnPromise = require('cross-spawn-promise');

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _which = require('which');

var _which2 = _interopRequireDefault(_which);

var _setup = require('./../lib/setup');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const TEMPLATES = {
	full: 'examples/full',
	empty: 'examples/empty',
	root: 'examples/root',
	simple: 'examples/simple'
};

exports.default = (0, _asyncCommand2.default)({
	command: 'create <name> [dest]',

	desc: 'Create a new application.',

	builder: {
		name: {
			description: 'directory and package name for the new app'
		},
		dest: {
			description: 'Directory to create the app within',
			defaultDescription: '<name>'
		},
		force: {
			description: 'Force option to create the directory for the new app',
			default: false
		},
		type: {
			description: 'A project template to start from',
			choices: ['full', 'root', 'simple', 'empty'],
			default: 'full'
		},
		yarn: {
			description: "Use 'yarn' instead of 'npm'",
			type: 'boolean',
			default: false
		},
		less: {
			description: 'Pre-install LESS support',
			type: 'boolean',
			default: false
		},
		sass: {
			description: 'Pre-install SASS/SCSS support',
			type: 'boolean',
			default: false
		},
		stylus: {
			description: 'Pre-install STYLUS support',
			type: 'boolean',
			default: false
		},
		git: {
			description: 'Initialize version control using git',
			type: 'boolean',
			default: false
		},
		install: {
			description: 'Install dependencies',
			type: 'boolean',
			default: true
		}
	},

	handler(argv) {
		return _asyncToGenerator(function* () {
			let template = TEMPLATES[argv.type];

			if (!template) {
				throw Error(`Unknown app template "${argv.type}".`);
			}

			let target = _path2.default.resolve(process.cwd(), argv.dest || argv.name);

			let exists = false;
			try {
				exists = (yield _fs2.default.stat(target)).isDirectory();
			} catch (err) {}

			if (exists && argv.force) {
				const question = {
					type: 'confirm',
					name: 'enableForce',
					message: `You are using '--force'. Do you wish to continue?`,
					default: false
				};

				var _ref = yield _inquirer2.default.prompt(question);

				let enableForce = _ref.enableForce;


				if (enableForce) {
					process.stdout.write('Initializing project in the current directory...\n');
				} else {
					process.stderr.write(_chalk2.default.red('Error: Cannot initialize in the current directory\n'));
					process.exit(1);
				}
			}

			if (exists && !argv.force) {
				process.stderr.write(_chalk2.default.red('Error: Cannot initialize in the current directory, please specify a different destination\n'));
				process.exit(1);
			}

			let spinner = (0, _ora2.default)({
				text: 'Creating project',
				color: 'magenta'
			}).start();

			if (!exists) {
				yield (0, _es6Promisify2.default)(_mkdirp2.default)(target);
			}

			yield (0, _recursiveCopy2.default)(_path2.default.resolve(__dirname, '../..', template), target, { filter: ['**/*', '!build'] });

			spinner.text = 'Initializing project';

			yield (0, _setup.initialize)(argv.yarn, target);

			let pkg = JSON.parse((yield _fs2.default.readFile(_path2.default.resolve(target, 'package.json'))));

			pkg.scripts = yield (0, _setup.pkgScripts)(argv.yarn, pkg);

			try {
				yield _fs2.default.stat(_path2.default.resolve(target, 'src'));
			} catch (err) {
				pkg.scripts.test = pkg.scripts.test.replace('src', '.');
			}

			pkg.eslintConfig = {
				extends: 'eslint-config-synacor'
			};

			yield _fs2.default.writeFile(_path2.default.resolve(target, 'package.json'), JSON.stringify(pkg, null, 2));

			if (argv.install) {
				spinner.text = 'Installing dev dependencies';

				yield (0, _setup.install)(argv.yarn, target, ['preact-cli', 'if-env', 'eslint', 'eslint-config-synacor', ...(argv.sass ? ['node-sass', 'sass-loader'] : []), ...(argv.less ? ['less', 'less-loader'] : []), ...(argv.stylus ? ['stylus', 'stylus-loader'] : [])], 'dev');

				spinner.text = 'Installing dependencies';

				yield (0, _setup.install)(argv.yarn, target, ['preact', 'preact-compat', 'preact-router']);

				spinner.succeed('Done!\n');
			}

			if (argv.less || argv.sass || argv.stylus) {
				let extension;

				if (argv.less) extension = '.less';
				if (argv.sass) extension = '.scss';
				if (argv.stylus) extension = '.styl';

				const cssFiles = yield (0, _es6Promisify2.default)(_glob2.default)(`${target}/**/*.css`, {
					ignore: [`${target}/build/**`, `${target}/node_modules/**`]
				});

				const changeExtension = function changeExtension(fileName) {
					return _fs2.default.rename(fileName, fileName.replace(/.css$/, extension));
				};

				yield Promise.all(cssFiles.map(changeExtension));
			}

			if (argv.git) {
				yield initializeVersionControl(target);
			}

			return trimLeft(`
			To get started, cd into the new directory:
			  \u001b[32mcd ${_path2.default.relative(process.cwd(), target)}\u001b[39m

			To start a development live-reload server:
			  \u001b[32m${argv.yarn === true ? 'yarn start' : 'npm start'}\u001b[39m

			To create a production build (in ./build):
			  \u001b[32m${argv.yarn === true ? 'yarn build' : 'npm run build'}\u001b[39m

			To start a production HTTP/2 server:
			  \u001b[32m${argv.yarn === true ? 'yarn serve' : 'npm run serve'}\u001b[39m
		`) + '\n';
		})();
	}
});


const trimLeft = string => string.trim().replace(/^\t+/gm, '');