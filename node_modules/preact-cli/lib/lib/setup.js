'use strict';

exports.__esModule = true;
exports.pkgScripts = exports.initialize = exports.install = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs.promised');

var _fs2 = _interopRequireDefault(_fs);

var _crossSpawnPromise = require('cross-spawn-promise');

var _crossSpawnPromise2 = _interopRequireDefault(_crossSpawnPromise);

var _shell = require('./shell');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const initialize = (() => {
	var _ref = _asyncToGenerator(function* (yarn, cwd) {
		let isYarnAvailable = yield (0, _shell.commandExists)('yarn');

		if (isYarnAvailable && yarn) {
			return yield (0, _crossSpawnPromise2.default)('yarn', ['init', '-y'], { cwd, stdio: 'ignore' });
		}

		yield (0, _crossSpawnPromise2.default)('npm', ['init', '-y'], { cwd, stdio: 'ignore' });
	});

	return function initialize(_x, _x2) {
		return _ref.apply(this, arguments);
	};
})();

const install = (() => {
	var _ref2 = _asyncToGenerator(function* (yarn, cwd, packages, env) {
		let isDev = env === 'dev' ? true : false;
		let isYarnAvailable = yield (0, _shell.commandExists)('yarn');
		let toInstall = packages.filter(Boolean);

		if (!yarn) {
			try {
				let stat = yield _fs2.default.stat(_path2.default.resolve(cwd, 'yarn.lock'));
				yarn = stat.isFile();
			} catch (e) {
				yarn = false;
			}
		}

		if (isYarnAvailable && yarn) {
			let args = ['add'];
			if (isDev) {
				args.push('-D');
			}

			return yield (0, _crossSpawnPromise2.default)('yarn', [...args, ...toInstall], { cwd, stdio: 'ignore' });
		}

		yield (0, _crossSpawnPromise2.default)('npm', ['install', isDev ? '--save-dev' : '--save', ...toInstall], { cwd, stdio: 'ignore' });
	});

	return function install(_x3, _x4, _x5, _x6) {
		return _ref2.apply(this, arguments);
	};
})();

const pkgScripts = (() => {
	var _ref3 = _asyncToGenerator(function* (yarn, pkg) {
		let isYarnAvailable = yield (0, _shell.commandExists)('yarn');

		if (isYarnAvailable && yarn) {
			return _extends({}, pkg.scripts || {}, {
				start: 'if-env NODE_ENV=production && yarn run -s serve || yarn run -s dev',
				build: 'preact build',
				serve: 'preact build && preact serve',
				dev: 'preact watch',
				test: 'eslint src && preact test'
			});
		}

		return _extends({}, pkg.scripts || {}, {
			start: 'if-env NODE_ENV=production && npm run -s serve || npm run -s dev',
			build: 'preact build',
			serve: 'preact build && preact serve',
			dev: 'preact watch',
			test: 'eslint src && preact test'
		});
	});

	return function pkgScripts(_x7, _x8) {
		return _ref3.apply(this, arguments);
	};
})();

exports.install = install;
exports.initialize = initialize;
exports.pkgScripts = pkgScripts;