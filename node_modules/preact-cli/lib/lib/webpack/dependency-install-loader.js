'use strict';

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _setup = require('./../setup');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CACHE = {};

function isInstalled(dep) {
	return CACHE[dep] || (CACHE[dep] = new Promise(resolve => {
		_fs2.default.stat(_path2.default.resolve('node_modules', dep), err => {
			resolve(!err);
		});
	}));
}

function installDeps(deps, save) {
	process.stdout.write(`\nInstalling ${deps.join(' ')}..`);
	return (0, _setup.install)(false, process.cwd(), deps, save).then(() => {
		process.stdout.write(` ..${deps.length} installed.\n`);
	});
}

module.exports = function (source, map) {
	let query = _loaderUtils2.default.getOptions(this) || {};

	let deps = query.modules;
	if (typeof deps === 'string') deps = deps.split(/\s*,\s*/);else if (!Array.isArray(deps)) deps = [deps];

	if (!deps.length) return { source, map };

	let callback = this.async();

	Promise.all(deps.map(isInstalled)).then(installed => {
		let toInstall = deps.filter((dep, index) => !installed[index]);
		if (toInstall.length) {
			return installDeps(toInstall, query.save);
		}
	}).then(() => callback(null, source, map)).catch(err => callback(`Error installing dependencies: ${err}`));
};